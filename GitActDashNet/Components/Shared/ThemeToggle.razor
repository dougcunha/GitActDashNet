@inject IJSRuntime JSRuntime
@inject ILogger<ThemeToggle> Logger

<button class="btn btn-outline-secondary"
        @onclick="ToggleTheme"
        title="@(isDarkMode ? "Switch to light mode" : "Switch to dark mode")">
    <i class="bi @(isDarkMode ? "bi-sun" : "bi-moon")"></i>
    @if (ShowText)
    {
        <span class="ms-2">@(isDarkMode ? "Light" : "Dark")</span>
    }
</button>

@code {
    [Parameter] public bool ShowText { get; set; }

    private bool isDarkMode;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Detect current theme from localStorage or default to light
                var currentTheme = await JSRuntime.InvokeAsync<string>("gitActDashInterop.theme.getTheme");
                isDarkMode = currentTheme == "dark";
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Logger.LogWarning(ex, "Failed to detect initial theme, defaulting to light mode");
                isDarkMode = false;
            }
        }
    }

    private async Task ToggleTheme()
    {
        try
        {
            var newTheme = await JSRuntime.InvokeAsync<string>("gitActDashInterop.theme.toggleTheme");
            isDarkMode = newTheme == "dark";

            Logger.LogInformation("Theme toggled to: {Theme}", newTheme);
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error toggling theme");
        }
    }
}
